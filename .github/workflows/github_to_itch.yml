name: Publish My Touch to Itch.io

on:
 push:
  branches:
  - master
 pull_request:
  branches:
  - master
env:
 BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }} # Needs to be added through github
 DISCORD_WEBHOOK: ${{secrets.DISCORD_WEBHOOK}} # Needs to be added through github
 GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 IS_MAIN: ${{ contains(github.ref, 'master') }}
 PROJECT_NAME: "My Touch"
 GODOT_VERSION: 4.1.1
jobs:
 CleanArtifacts:
  # This job clears out the previous artifacts made so you don't run out of space in your github account
  runs-on: ubuntu-latest
  steps:
  - uses: kolpav/purge-artifacts-action@v1
    with:
     token: ${{ secrets.GITHUB_TOKEN }}
     expire-in: 1hr

 Export:
  needs: CleanArtifacts # wait for artifacts to clean before making a new one
  runs-on: ubuntu-latest
  steps:
  - uses: actions/checkout@v2
  
  - name: Set up JDK 11
    uses: actions/setup-java@v3
    with:
      java-version: '11'
      distribution: 'adopt'

  - name: Setup Android SDK
    uses: android-actions/setup-android@v2

  - name: Download + Authorize Godot
    run: |
       curl -L -o godot.zip https://downloads.tuxfamily.org/godotengine/${{ env.GODOT_VERSION }}/Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64.zip
       unzip godot.zip
       mv Godot_v${{ env.GODOT_VERSION }}-stable_linux.x86_64 godot
       ls
       chmod +x godot
       mkdir ~/.config/godot/
       cat <<EOT >> ~/.config/godot/editor_settings-4.tres
       [gd_resource type="EditorSettings" format=3]

       [resource]
       export/android/android_sdk_path = "/usr/local/lib/android/sdk"
       EOT
       
  - name: Download Export Templates
    run: |
     curl -L -o export_templates.zip https://downloads.tuxfamily.org/godotengine/${{ env.GODOT_VERSION }}/Godot_v${{ env.GODOT_VERSION }}-stable_export_templates.tpz
     unzip export_templates.zip
  
  - name: Install Export Templates
    run: |
     mkdir -p ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable
     mv ./templates/* ~/.local/share/godot/export_templates/${{ env.GODOT_VERSION }}.stable

  - name: Import Project
    run: |
     ./godot --headless -e --quit --path ./

  - name: Export Windows Desktop
    run: |
     mkdir -p ./exports
     ./godot --headless --path ./ --export-release "windows" ./exports/My\ Touch.x86_64.exe
    
  - name: Export macOS
    run: |
     mkdir -p ./exports
     ./godot --headless --path ./ --export-release "mac" ./exports/My\ Touch.app.zip
    
  - name: Export Linux/X11
    run: |
     mkdir -p ./exports
     ./godot --headless --path ./ --export-release "Linux/X11" ./exports/My\ Touch.x86_64
    
  - name: Export Android
    run: |
     mkdir -p ./exports
     ./godot --headless --path ./ --export-release "Android" ./exports/My\ Touch.apk
    
    

  - uses: actions/upload-artifact@v2
    with:
     name: exports
     path: exports
  
 Release:
  needs: Export
  if: ${{ contains(github.ref, 'master') }}
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v2
   
    - name: Version
      id: tag_version
      uses: mathieudutour/github-tag-action@v5.6
      with:
       github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Verify Tag
      if: ${{ !steps.tag_version.outputs.new_tag }}
      run: exit 1
    
    - name: Download Exports
      uses: actions/download-artifact@v2
      with:
       name: exports
       path: exports
    
    - name: Zip
      run: |
       zip -r windows-release-${{ steps.tag_version.outputs.new_tag }}.zip exports/My\ Touch.x86_64.exe
       zip -r linux-release-${{ steps.tag_version.outputs.new_tag }}.zip exports/My\ Touch.x86_64
       zip -r macos-release-${{ steps.tag_version.outputs.new_tag }}.zip exports/My\ Touch.app.zip
       zip -r android-release-${{ steps.tag_version.outputs.new_tag }}.zip exports/My\ Touch.apk
    
    - name: Create Github Release
      id: create_release
      uses: actions/create-release@v1
      env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
       tag_name: ${{ steps.tag_version.outputs.new_tag }}
       release_name: Release ${{ steps.tag_version.outputs.new_tag }}
       body: ${{ steps.tag_version.outputs.changelog }}
    
    - name: Upload Linux Artifact
      uses: actions/upload-release-asset@v1
      env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
       upload_url: ${{ steps.create_release.outputs.upload_url }}
       asset_path: ./linux-release-${{ steps.tag_version.outputs.new_tag }}.zip
       asset_name: linux-release-${{ steps.tag_version.outputs.new_tag }}.zip
       asset_content_type: application/zip

    - name: Upload Windows Artifact
      uses: actions/upload-release-asset@v1
      env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
       upload_url: ${{ steps.create_release.outputs.upload_url }}
       asset_path: ./windows-release-${{ steps.tag_version.outputs.new_tag }}.zip
       asset_name: windows-release-${{ steps.tag_version.outputs.new_tag }}.zip
       asset_content_type: application/zip

    - name: Upload MacOS Artifact
      uses: actions/upload-release-asset@v1
      env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
       upload_url: ${{ steps.create_release.outputs.upload_url }}
       asset_path: ./macos-release-${{ steps.tag_version.outputs.new_tag }}.zip
       asset_name: macos-release-${{ steps.tag_version.outputs.new_tag }}.zip
       asset_content_type: application/zip

    - name: Upload Android Artifact
      uses: actions/upload-release-asset@v1
      env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
       upload_url: ${{ steps.create_release.outputs.upload_url }}
       asset_path: ./android-release-${{ steps.tag_version.outputs.new_tag }}.zip
       asset_name: android-release-${{ steps.tag_version.outputs.new_tag }}.zip
       asset_content_type: application/zip

    - uses: frdrwrt/write-to-file@v1.3
      with:
       filepath: ./VERSION.txt
       content: ${{ steps.tag_version.outputs.new_version }}
       mode: 0655
    
    - uses: actions/upload-artifact@v2
      with:
       name: VERSION
       path: ./VERSION.txt
 
 Publish:
  needs: Release
  if: ${{ contains(github.ref, 'master') }}
  runs-on: ubuntu-latest
  steps:
    - uses: actions/download-artifact@v2
    
    - name: Download + Authorize Butler
      run: |
       curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
       unzip butler.zip
       chmod +x butler
       ./butler -V
    
    - name: Login To Butler
      run: ./butler login
    

# Cleanup:
#  needs: [Export, Release, Publish]
#  runs-on: ubuntu-latest
#  steps:
#    - uses: geekyeggo/delete-artifact@v1
#      with:
#       name: VERSION
